/*
 * last updated By HuemoneLab, May 2023

 * This software is provided "AS IS" only for educational purpose using arduino kit made by Huemone Lab.
 * Unauthorized for copying, modifying, distributing of this code.

 * 본 라이브러리는 (주)휴몬랩이 제작한 아두이노 키트의 실습을 위해 제작되었습니다.
 * 따라서 모든 저작권은 (주)휴몬랩에 있습니다.
 * 키트 실습과 같은 교육적 용도로만 사용 및 활용이 가능하며
 * 무단으로 복사/수정/재배포하거나 코드 전체 혹은 일부를 다른 용도로 사용할 시 법적인 조치를 취할 수 있습니다.
 */

#ifndef HUEMONELAB_DOT_MATRIX_CPP
#define HUEMONELAB_DOT_MATRIX_CPP

#include "./DotMatrix.h"

#define EMOJI_COUNT 70
const byte IMAGES[EMOJI_COUNT][8] = {
    {B00100100, // 1. heart 1
     B01111110,
     B11111111,
     B11111111,
     B11111111,
     B01111110,
     B00111100,
     B00011000},
    {B01100110, // 2. heart 2
     B10011001,
     B10000001,
     B10000001,
     B10000001,
     B01000010,
     B00100100,
     B00011000},
    {B00000000, // 3. smile
     B00100100,
     B00100100,
     B00100100,
     B00000000,
     B10000001,
     B01000010,
     B00111100},
    {B00000000, // 4. sad
     B00100100,
     B00100100,
     B00100100,
     B00000000,
     B00111100,
     B01000010,
     B10000001},
    {B00111100, // 5. happy face
     B01000010,
     B10100101,
     B10000001,
     B10100101,
     B10011001,
     B01000010,
     B00111100},
    {B00111100, // 6. sad face
     B01000010,
     B10100101,
     B10000001,
     B10011001,
     B10100101,
     B01000010,
     B00111100},
    {B00000000, // 7. smile 2
     B01000010,
     B10100101,
     B00000000,
     B00000000,
     B00000000,
     B00100100,
     B00011000},
    {B11111111, // 8. square smile
     B10000001,
     B10100101,
     B10000001,
     B10100101,
     B10011001,
     B10000001,
     B11111111},
    {B11111111, // 9. square sad
     B10000001,
     B10100101,
     B10000001,
     B10011001,
     B10100101,
     B10000001,
     B11111111},
    {B10000001, // 10. X
     B01000010,
     B00100100,
     B00011000,
     B00011000,
     B00100100,
     B01000010,
     B10000001},
    {B00011000, // 11. ◆
     B00111100,
     B01111110,
     B11111111,
     B11111111,
     B01111110,
     B00111100,
     B00011000},
    {B11111111, // 12. ■
     B11111111,
     B11111111,
     B11111111,
     B11111111,
     B11111111,
     B11111111,
     B11111111},
    {B00000000, // 13. small ■
     B00000000,
     B00111100,
     B00111100,
     B00111100,
     B00111100,
     B00000000,
     B00000000},
    {B00111100, // 14. ●
     B01111110,
     B11111111,
     B11111111,
     B11111111,
     B11111111,
     B01111110,
     B00111100},
    {B00000000, // 15. small ●
     B00000000,
     B00011000,
     B00111100,
     B00111100,
     B00011000,
     B00000000,
     B00000000},
    {B00000000, // 16. ▲
     B00001000,
     B00011100,
     B00111110,
     B01111111,
     B00000000,
     B00000000,
     B00000000},
    {B00000000, // 17. small ▲
     B00000000,
     B00010000,
     B00111000,
     B01111100,
     B00000000,
     B00000000,
     B00000000},
    {B00000000, // 18. ▶
     B00100000,
     B00110000,
     B00111000,
     B00111100,
     B00111000,
     B00110000,
     B00100000},
    {B00000000, // 19. ◀
     B00000100,
     B00001100,
     B00011100,
     B00111100,
     B00011100,
     B00001100,
     B00000100},
    {B01100000, // 20. >>
     B00110000,
     B00011000,
     B00001100,
     B00001100,
     B00011000,
     B00110000,
     B01100000},
    {B00000110, // 21. <<
     B00001100,
     B00011000,
     B00110000,
     B00110000,
     B00011000,
     B00001100,
     B00000110},
    {B10011001, // 22. ※
     B01011010,
     B00100100,
     B11011011,
     B11011011,
     B00100100,
     B01011010,
     B10011001},
    {B00100100, // 23. #
     B00100100,
     B11111111,
     B00100100,
     B00100100,
     B11111111,
     B00100100,
     B00100100},
    {B00011000, // 24. !
     B00011000,
     B00011000,
     B00011000,
     B00011000,
     B00000000,
     B00011000,
     B00011000},
    {B00011000, // 25. ?
     B00111100,
     B00100100,
     B00001100,
     B00011000,
     B00011000,
     B00000000,
     B00011000},
    {B00011000, // 26. +
     B00011000,
     B00011000,
     B11111111,
     B11111111,
     B00011000,
     B00011000,
     B00011000},
    {B00000000, // 27. -
     B00000000,
     B00000000,
     B11111111,
     B11111111,
     B00000000,
     B00000000,
     B00000000},
    {B00011000, // 28. /(divide)
     B00011000,
     B00000000,
     B11111111,
     B11111111,
     B00000000,
     B00011000,
     B00011000},
    {B11000011, // 29. %
     B11000111,
     B00001110,
     B00011100,
     B00111000,
     B01110000,
     B11100011,
     B11000011},
    {B11000011, // 30. *
     B11100111,
     B01111110,
     B00111100,
     B00111100,
     B01111110,
     B11100111,
     B11000011},
    {B00000000, // 31. =
     B11111111,
     B11111111,
     B00000000,
     B00000000,
     B11111111,
     B11111111,
     B00000000},
    {B00010000, // 32. $
     B00111100,
     B01010000,
     B01010000,
     B00111000,
     B00010100,
     B00010100,
     B01111000},
    {B00000000, // 33. ♠
     B00010000,
     B00111000,
     B01111100,
     B11111110,
     B01010100,
     B00010000,
     B00111000},
    {B00011000, // 34. →
     B00001100,
     B00000110,
     B11111011,
     B11111011,
     B00000110,
     B00001100,
     B00011000},
    {B00011000, // 35. ←
     B00110000,
     B01100000,
     B11011111,
     B11011111,
     B01100000,
     B00110000,
     B00011000},
    {B00011000, // 36. ↑
     B00111100,
     B01100110,
     B11011011,
     B10011001,
     B00011000,
     B00011000,
     B00011000},
    {B00011000, // 37. ↓
     B00011000,
     B00011000,
     B10011001,
     B11011011,
     B01100110,
     B00111100,
     B00011000},
    {B00000000, // 38. ↔
     B00100100,
     B01000010,
     B11111111,
     B01000010,
     B00100100,
     B00000000,
     B00000000},
    {B00011111, // 39. ↗
     B00000011,
     B00000101,
     B00001001,
     B00010001,
     B00100000,
     B01000000,
     B10000000},
    {B00000001, // 40. ↙
     B00000010,
     B00000100,
     B10001000,
     B10010000,
     B10100000,
     B11000000,
     B11111000},
    {B11111000, // 41. ↖
     B11000000,
     B10100000,
     B10010000,
     B10001000,
     B00000100,
     B00000010,
     B00000001},
    {B10000000, // 42. ↘
     B01000000,
     B00100000,
     B00010001,
     B00001001,
     B00000101,
     B00000011,
     B00011111},
    {B11111111, // 43. insta
     B10000001,
     B10011001,
     B10100101,
     B10100101,
     B10011001,
     B10000001,
     B11111111},
    {B00011100, // 44. facebook
     B00100000,
     B00100000,
     B01111000,
     B00100000,
     B00100000,
     B00100000,
     B00100000},
    {B00000000, // 45. youtube
     B00000000,
     B11111111,
     B11101111,
     B11100111,
     B11101111,
     B11111111,
     B00000000},
    {B00000000, // 46. tel
     B11100000,
     B11100000,
     B11000000,
     B01100000,
     B00110010,
     B00011110,
     B00001110},
    {B11111111, // 47. message
     B01111110,
     B10111101,
     B11011011,
     B11100111,
     B11111111,
     B11111111,
     B11111111},
    {B01110000, // 48. 돋보기
     B10001000,
     B10001000,
     B10001000,
     B01111000,
     B00000100,
     B00000010,
     B00000001},
    {B00000000, // 49. check
     B00000001,
     B00000011,
     B00000110,
     B10001100,
     B11011000,
     B01110000,
     B00100000},
    {B00111000, // 50. location
     B01000100,
     B10111010,
     B10111010,
     B10000010,
     B01000100,
     B00101000,
     B00010000},
    {B00011000, // 51. user
     B00111100,
     B00011000,
     B00000000,
     B00111100,
     B01111110,
     B01111110,
     B01111110},
    {B00011000, // 52. home
     B00111100,
     B01111110,
     B11111111,
     B11111111,
     B11100111,
     B11100111,
     B11100111},
    {B00111100, // 53. ben
     B01000110,
     B10001111,
     B10011101,
     B10111001,
     B11110001,
     B01100010,
     B00111100},
    {B10000001, // 54. sun
     B01000010,
     B00011000,
     B00111100,
     B00111100,
     B00011000,
     B01000010,
     B10000001},
    {B00000000, // 55. cloud
     B00000110,
     B01001111,
     B11111111,
     B11111111,
     B00000000,
     B00000000,
     B00000000},
    {B00000010, // 56. rain
     B01000111,
     B11111111,
     B11111111,
     B00000000,
     B01010100,
     B01010100,
     B01010100},
    {B00000010, // 57. snow
     B01000111,
     B11111111,
     B11111111,
     B00000000,
     B01000010,
     B00101000,
     B10000010},
    {B00000000, // 58. car
     B00000000,
     B00111100,
     B00101100,
     B11111111,
     B11111111,
     B00100100,
     B00000000},
    {B00000000, // 59. ♬
     B00111110,
     B00111110,
     B00100010,
     B00100010,
     B01100110,
     B01100110,
     B00000000},
    {B00000000, // 60. ♪
     B00011000,
     B00011100,
     B00010000,
     B00010000,
     B00110000,
     B01110000,
     B00100000},
    {B00011000, // 61. flag
     B00011100,
     B00011000,
     B00010000,
     B00010000,
     B01110000,
     B01110000,
     B00000000},
    {B00111100, // 62. ◎
     B01000010,
     B10011001,
     B10100101,
     B10100101,
     B10011001,
     B01000010,
     B00111100},
    {B00000000, // 63. 물방울
     B00001000,
     B00011100,
     B00111110,
     B00111110,
     B00111110,
     B00011100,
     B00000000},
    {B00010000, // 64.(
     B00100000,
     B01000000,
     B01000000,
     B01000000,
     B01000000,
     B00100000,
     B00010000},
    {B00001000, // 65. )
     B00000100,
     B00000010,
     B00000010,
     B00000010,
     B00000010,
     B00000100,
     B00001000},
    {B00001111, // 66. half 1
     B00001111,
     B00001111,
     B00001111,
     B00001111,
     B00001111,
     B00001111,
     B00001111},
    {B00000001, // 67. half 2
     B00000011,
     B00000111,
     B00001111,
     B00011111,
     B00111111,
     B01111111,
     B11111111},
    {B01010101, // 68. dot 1
     B10101010,
     B01010101,
     B10101010,
     B01010101,
     B10101010,
     B01010101,
     B10101010},
    {B11011011, // 69. dot 2
     B11011011,
     B00000000,
     B11011011,
     B11011011,
     B00000000,
     B11011011,
     B11011011},
    {B10000001, // 70. dot 3
     B11000011,
     B11100111,
     B11111111,
     B11111111,
     B11100111,
     B11000011,
     B10000001}};

DotMatrix::DotMatrix(uint8_t dataPin, uint8_t csPin, uint8_t clkPin, uint8_t numDevices = 1) : MD_Parola(MD_MAX72XX::GENERIC_HW, dataPin, clkPin, csPin, numDevices)
{
  begin();
  setTextAlignment(PA_CENTER);
  setSpeedInOut(100, 100);
  setPause(10 * getSpeed());

  _dataPin = dataPin;
  _csPin = csPin;
  _clkPin = clkPin;
}

void DotMatrix::clear()
{
  displayClear();
}

void DotMatrix::printScroll(const char *pText, textEffect effect = left)
{
  displayText((char *)pText, PA_CENTER, getSpeed(), getPause(), (textEffect_t)effect);
  while (!displayAnimate())
  {}
}

void DotMatrix::printImage(const byte images[8])
{
  byte status[64];
  byte spidata[16];

  for (int row = 0; row < ROW_SIZE; row++)
  {
    for (int col = 0; col < COL_SIZE; col++)
    {
      // LedControl.cpp - setLed
      bool state = bitRead(images[col], row);

      int offset = 0;
      byte val = B10000000 >> col;

      if (state)
      {
        status[offset + row] = status[offset + row] | val;
      }
      else
      {
        val = ~val;
        status[offset + row] = status[offset + row] & val;
      }

      // LedControl.cpp - spiTransfer
      // spiTransfer(addr, row+1, status[offset+row])

      byte opcode = row + 1;
      byte data = status[offset + row];

      int maxbytes = 1 * 2;

      for (int i = 0; i < maxbytes; i++)
        spidata[i] = (byte)0;

      // put our device data into the array
      spidata[offset + 1] = opcode;
      spidata[offset] = data;
      // enable the line
      digitalWrite(_csPin, LOW);
      // Now shift out the data
      for (int i = maxbytes; i > 0; i--)
        shiftOut(_dataPin, _clkPin, MSBFIRST, spidata[i - 1]);
      // latch the data onto the display
      digitalWrite(_csPin, HIGH);
    }
  }
}

void DotMatrix::printEmoji(int num)
{
  if (num > EMOJI_COUNT || num <= 0)
    return;

  printImage(IMAGES[num - 1]);
}

#endif